import os

# Define the name of the file to store the locations
LOCATIONS_FILE = 'locations.txt'

# Define the function for adding a new location
def add_location():
    # Ask the user to input the name of the new location
    location_name = input("Enter location name: ")
    
    # Create a dictionary to hold the cells within the location
    cells = {}
    
    # Check if the locations file already exists
    if os.path.isfile(LOCATIONS_FILE):
        # If the file exists, read its contents into a dictionary
        with open(LOCATIONS_FILE, 'r') as f:
            locations = eval(f.read())
            
        # Determine the ID number for the new location by counting the existing locations
        location_id_count = len(locations) + 1
    else:
        # If the file does not exist, start the ID count at 1
        locations = {}
        location_id_count = 1
    
    # Enter a loop to allow the user to add cells to the new location
    while True:
        cell_name = input("Enter cell name (or 'q' to quit adding cells): ")
        if cell_name == "q":
            break
        cell_id = f"loc{location_id_count}cell{len(cells)+1}"
        directions = {}
        for dir_name in ['north', 'south', 'east', 'west', 'northeast', 'northwest', 'southeast', 'southwest']:
            print("""*NW * N * NE*
                * W * o * E *
                *SW * S * SE*""")
            dir_id = input(f"Enter ID for {dir_name} direction: ")
            directions[dir_name] = dir_id
        cells[cell_id] = {
            "cell_name": cell_name,
            "directions": directions
        }
        
    # Add the new location to the dictionary of locations
    locations[f"loc{location_id_count}"] = {
        "location_name": location_name,
        "cells": cells
    }
    
    # Write the updated locations dictionary to the file
    with open(LOCATIONS_FILE, 'w') as f:
        f.write(str(locations))
        
    # Print a message to confirm that the location was added
    print("Location added successfully!")

    def edit_location():
    # Ask the user to input the name of the location to edit
    location_name = input("Enter name of location to edit: ")

    # Check if the locations file already exists
    if os.path.isfile(LOCATIONS_FILE):
        # If the file exists, read its contents into a dictionary
        with open(LOCATIONS_FILE, 'r') as f:
            locations = eval(f.read())

        # Find the location in the dictionary by name
        for loc_id, loc_data in locations.items():
            if loc_data['location_name'] == location_name:
                # Print the existing cells and directions for the location
                print(f"Cells in {location_name}:")
                for cell_id, cell_data in loc_data['cells'].items():
                    print(f"{cell_data['cell_name']} ({cell_id})")
                    for dir_name, dir_id in cell_data['directions'].items():
                        print(f"{dir_name}: {dir_id}")
                        
                # Ask the user to select a cell to edit
                cell_id = input("Enter ID of cell to edit: ")
                if cell_id in loc_data['cells']:
                    # Ask the user to select a direction to edit
                    dir_name = input("Enter name of direction to edit: ")
                    if dir_name in loc_data['cells'][cell_id]['directions']:
                        # Ask the user to enter a new ID for the direction
                        new_dir_id = input("Enter new ID for direction: ")
                        loc_data['cells'][cell_id]['directions'][dir_name] = new_dir_id

                        # Write the updated locations dictionary to the file
                        with open(LOCATIONS_FILE, 'w') as f:
                            f.write(str(locations))

                        # Print a message to confirm that the location was edited
                        print(f"{location_name}, {cell_id}, {dir_name} edited successfully!")
                    else:
                        print(f"Direction {dir_name} not found in cell {cell_id}.")
                else:
                    print(f"Cell {cell_id} not found in {location_name}.")
                break
        else:
            print(f"Location {location_name} not found.")
    else:
        # If the file does not exist, the location cannot be edited
        print("Locations file not found. Cannot edit location.")
        import os

# Define the name of the file to store the locations
LOCATIONS_FILE = 'locations.txt'

# Define the function for deleting a location
def delete_location():
    # Ask the user to input the ID of the location to be deleted
    location_id = input("Enter the ID of the location to be deleted: ")
    
    # Check if the locations file already exists
    if os.path.isfile(LOCATIONS_FILE):
        # If the file exists, read its contents into a dictionary
        with open(LOCATIONS_FILE, 'r') as f:
            locations = eval(f.read())
            
        # Check if the location ID exists in the dictionary
        if location_id in locations:
            # If the ID exists, delete the location from the dictionary
            del locations[location_id]
            
            # Write the updated locations dictionary to the file
            with open(LOCATIONS_FILE, 'w') as f:
                f.write(str(locations))
            
            # Print a message to confirm that the location was deleted
            print(f"Location {location_id} deleted successfully!")
        else:
            # If the ID does not exist, print an error message
            print(f"Location {location_id} does not exist!")
    else:
        # If the file does not exist, print an error message
        print("Error: locations file does not exist!")




while True:
    print("Select an option:")
    print("1. Add a new location")
    print("2. Edit an existing location")
    print("3. Delete an existing location")
    print("4. Quit")
    
    option = input("Enter your choice (1-4): ")
    
    if option == "1":
        add_location()
    elif option == "2":
        edit_location()
    elif option == "3":
        delete_location()
    elif option == "4":
        break
    else:
        print("Invalid option!")

